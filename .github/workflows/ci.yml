name: Java APP

on: 
  push:
    branches: [ main ]
    paths-ignore:
      - 'deployment.yaml'  # Ignore changes to this file to prevent loops
    
jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - name: Test with Maven
      run: mvn -B test --file pom.xml
  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: create folder 
      run: mkdir staging && cp  -r  target/** staging

    - name: upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-artifact
        path: staging
  sonar:
    name: Build and analyze
    needs:  test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'temurin' # Alternative distribution options are available.
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=jeeva-ins_boardgame_DevSecOps_GitOps
  docker: 
     runs-on: ubuntu-latest
     needs: [build,sonar]
     steps:
      -
        name: Checkout
        uses: actions/checkout@v4

      - name: download artifact
        uses: actions/download-artifact@v4
        with:
          name: my-artifact
          path: staging
      - name: Display structure of downloaded files
        run: ls -R
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
            images: ${{ vars.DOCKERHUB_USERNAME }}/boardgame
            tags: |
              type=sha,format=long
              type=ref,event=branch
              latest
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Set image tag output
        id: set_output
        run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT


  update-manifest:
    name: Update Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
        contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
#        with:
#         token: ${{ secrets.TOKEN }}
      
      - name: Setup Git config
        run: |
          git config user.name "Jeeva R"
          git config user.email "jeevains@gmail.com"
      
      - name: Update Kubernetes deployment file
        env:
          IMAGE_TAG: sha-${{ github.sha }}
          #GITHUB_REPOSITORY: ${{ github.repository }}
          #REGISTRY: ghcr.io
          IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/boardgame
        run: |
          # Define the new image with tag
          #NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"
          
          NEW_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}"
          
          
          # Update the deployment file directly
          sed -i "s+image: ${REGISTRY}/.*+image: ${NEW_IMAGE}+g" deployment.yml
          
          # Verify the change
          echo "Updated deployment to use image: ${NEW_IMAGE}"
          grep -A 1 "image:" deployment.yml
      
      - name: Commit and push changes
        run: |
          git add deployment.yml
          git commit -m "Update Kubernetes deployment with new image tag: ${{ needs.docker.set_output.output }} [skip ci]" || echo "No changes to commit"
          git push 
      